// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { errorMessages, AppError } from '@/lib/errors';
import { logger } from '@/lib/logger';

const SUPABASE_URL = "https://socrnutfpqtcjmetskta.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNvY3JudXRmcHF0Y2ptZXRza3RhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzgzNDg1OTMsImV4cCI6MjA1MzkyNDU5M30.yFkP90puucdc1qxlIOs3Hp4V18_LKea2mf6blmJ9Rpw";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    storageKey: 'muran-auth-token',
    autoRefreshToken: true,
    detectSessionInUrl: true,
    storage: {
      getItem: (key) => {
        try {
          const value = localStorage.getItem(key);
          logger.debug('Recuperando dado da storage:', { key });
          return value;
        } catch (error) {
          logger.error('Erro ao recuperar dado da storage:', error);
          return null;
        }
      },
      setItem: (key, value) => {
        try {
          logger.debug('Salvando dado na storage:', { key });
          localStorage.setItem(key, value);
        } catch (error) {
          logger.error('Erro ao salvar dado da storage:', error);
        }
      },
      removeItem: (key) => {
        try {
          logger.debug('Removendo dado da storage:', key);
          localStorage.removeItem(key);
        } catch (error) {
          logger.error('Erro ao remover dado da storage:', error);
        }
      },
    },
  },
});

// Função centralizada para verificar o estado da sessão
export const checkSession = async () => {
  try {
    logger.debug('Verificando sessão...');
    const { data: { session }, error } = await supabase.auth.getSession();
    
    if (error) {
      logger.error('Erro ao verificar sessão:', error);
      throw new AppError(errorMessages.AUTH_EXPIRED, 'AUTH_EXPIRED');
    }

    if (!session) {
      logger.warn('Sessão não encontrada');
      return false;
    }

    // Verificar se o token está próximo de expirar (60 minutos)
    const expiresAt = new Date(session.expires_at! * 1000);
    const sixtyMinutes = 60 * 60 * 1000;
    
    if (expiresAt.getTime() - Date.now() < sixtyMinutes) {
      logger.debug('Sessão próxima de expirar, renovando preventivamente...');
      try {
        await supabase.auth.refreshSession();
        logger.debug('Sessão renovada preventivamente com sucesso!');
      } catch (refreshError) {
        logger.error('Erro ao renovar sessão preventivamente:', refreshError);
      }
    }

    return true;
  } catch (error) {
    logger.error('Erro inesperado ao verificar sessão:', error);
    return false;
  }
};